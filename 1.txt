1. SPA
클라이언트 측에서 페이지를 변경하는 SPA라서, 세션 체크 요청은 클라이언트 측에서 해야한다.
추후 jwt를 사용해도 웹앱 형식이면 마찬가지 일듯

2. 서브미션의 mediaType  : application/json ? application/x-www-form-urlencoded
통신을 application/json으로 사용하도록 전부 변경하려 했지만, eXBuilder6의 여러 가지 문제가 있었다.
    1) json으로 통신 시 무조건 POST로 가는 문제
        >> GET으로 가야하면 무조건 application/x-www-form-urlencoded를 사용해야함
    2) 웹에서 보내줄 땐 {data: {dm_memberInfo: {mem_id: "ㅁㅇ", mem_pw: "ad", mem_name: "", mem_rank: "", mem_part: ""}}} 
       "data"가 다른 데이터들을 감싸 안은 포맷이라서 서버에서 c.Bind()로 매핑하려할 땐, "data" 구조체를 따로 만들어야 했다.
       반대로 서버에서 클라이언트에 보낼땐 "data"가 없어야 값을 받을 수 있었다.. 

       ... 그래서 구조체 재사용이 안되고, request, response 따로 운영해야 했다.

3. 쿼리
Database 작업이 성능을 좌우하므로 항상 쿼리에 신경써야 한다.
(1) 
select count(*) FROM table 을 많이 썼다. 1만건 이하라면 괜찮지만, 수십만 건이라면 다르다.
PK를 이용한 select count(0) FROM table 을 쓰는 것이 성능상엔 더 좋다.
(단, 단순히 테이블의 모든 row의 개수를 원하는 거면 *이 더 빠르다. WHERE절을 이용하여 count하는 경우에 PK를 지정하면 좋다)

빅데이터처럼 5천만건 이상의 경우라면, index를 이용해도 4분가량이 걸린다고 한다.

mssql이라면 
SELECT DISTINCT MAX(A.rows)FROM SYSINDEXES AS A
INNER JOIN SYSOBJECTS AS B 
ON A.id = B.idWHERE B.type = 'U' and B.name = 'tb_test'

mysql이라면 ...?


이 쿼리를 사용하면 5천만건이라도 0초가 걸리니 오버스펙일지라도 한번쯤 더 고민을 먼저 하고 코딩을 해야겠다

4. MacOS
windows에서는 그냥 넘어갈 수 있는 부분들이 Mac에선 안넘어가졌다
- 1 request json이 구조체에 bind안되는 이슈 (400 typeErr 구조체의 필드가 int라 해당 에러 발생..)
-> 그냥 request Data Get용 구조체하나 생성해서 타입을 일일이 Parsing하기로 함
- 2 index가 0부터 시작하면 doesn't have default value, 
아니 근데 auto_increment 왜안됨? 애초에 인덱스 안넣어도 알아서 증가해야지?

gorm mariadb auto_increment는 왜 안먹는걸까... 그냥 테이블에서 바꿔버림

5. Table 설계
생각보다 이전 table들의 타입 설계가 별로였다. 
MSSQL을 사용하다 mariadb로 변경을 하고 있어서..
report의 rpt_confirm 컬럼은 0과 1만 쓸거면 bool을 쓰던가 tinyint를 썼으면 좋았을텐데
괜히 bit를 써서 gorm 사용에 있어 불편함을 불러왔다.
(golang의 슬라이스에 바로 converting 해주는 find함수에서 golang의 byte, int8 등과 호환 안됨)

AutoMigrate를 써서 테이블 생성

6. Gorm 조인
report에 보고자, 보고대상, 참조대상을 member의 ID를 기록하도록 하니까 문제가 있었다
실제로 보여줄때에는 이름으로 보여줘야 하는데 이름을 가져올 방법이 없던 것
Raw 쿼리를 쓰기에는 너무 깔끔하지 못해서 많은 삽질을 하며 Gorm을 통해 가져오는 방법을 찾았다

먼저 이름을 따로 받아올 struct를 만들어 놓고, 가져오는 모델을 포함시킨다

type BsmgIncludeNameReport struct {
	BsmgReportInfo
	Reporter_Name string
	ToRpt_Name    string
	Ref_Name      string
}

func (brName *BsmgIncludeNameReport) ChangeIDToName() {
	brName.BsmgReportInfo.Rpt_Reporter = brName.Rpt_Reporter
	brName.BsmgReportInfo.Rpt_toRpt = brName.ToRpt_Name
	brName.BsmgReportInfo.Rpt_ref = brName.Ref_Name
}

가져오는 쿼리는 다음과 같다

중요한 건 매핑을 위해 select함수를 잘 쓰는 것이다
dbWhere := dbm.DB.Model(define.BsmgReportInfo{}).Debug().
        // bsmg_report_infos.*이라고 하면 gorm이 못찾는다. 그냥 *을 해줘야함
		Select(`*, m.mem_name as reporter_name`). 
        Joins("INNER JOIN bsmg_member_infos m ON m.mem_id = bsmg_report_infos.rpt_reporter").
        Joins("INNER JOIN bsmg_attr1_infos a ON a.attr1_idx = bsmg_report_infos.rpt_attr1").
        Where("rpt_title LIKE ? OR rpt_content LIKE ? OR m.mem_name LIKE ?", "%"+ipb+"%", "%"+ipb+"%", "%"+ipb+"%").
        Order("rpt_idx DESC")
		dbWhere.Count(&totalCount)
		dbWhere.Limit(limit).Offset(offset).Scan(&reportIncludeName)
Find가 아닌 Scan인 것도 주의해야 한다

// 데드락
DB 작업을 하면서, server에 Mutex에 Lock을 걸었었는데, 서버가 먹통이 되었었다.
아무 작업도 안하길래 왜 이런걸까 당황하다가, 이전에 서버 프로세서를 
채널링을 통해 DB작업을 하려고 고루틴으로 돌린 게 기억났다.
Server의 State를 Update하면서 Lock, Unlock을 하고 있더라.
SetState에 Lock, Unlock을 하면 되는데 굳이 SetState를 호출하는 for문에서 Lock을 걸고 있어서
무한으로 Lock, Unlock을 하고 있었던 것이다.
작은 나만의 프로젝트여서 금방 찾았지, 큰 프로젝트였으면 상당히 찾기 힘들 것 같다.
언제나 Mutex Lock을 걸때는 주의해야 겠다.

// 중복로그인
보통은 기존 로그인을 끊고, 새로운 사용자를 로그인시키는데, JWT는 서버에 저장을 안하니까
서버에서 기존 사용자의 토큰을 회수할 수가 없다.
결국 세션을 이용해 신규 로그인을 방지시키는 것만 구현했다


// 빈번하게 가져오는 DB 정보에 대해서는 DB 캐싱을 적용해서 불필요한 DB 트래픽 비용을 줄이고 API 응답속도를 높일 수 있다
실제로 큰 데이터를 다뤄본적이 없어 필요성을 체감한 적은 없었지만.. 큰 규모의 서비스를 제공하려면 필수라 생각되어 써보고 싶다.
Redis를 통한 캐시 서버

kafka를 통해서 보고서 확인 시 알림서비스 및 이벤트 보관도 해보고싶다

// 테스트 기반 개발 (TDD)
기존 API를 프레임워크와 내 프로젝트에 맞게 변형을 많이 하면서
생각보다 테스트 주도 개발이 내게 익숙치 않았다는걸 깨달음
기능에 대한 테스트를 생각해서 그 결과물을 출력한다던가, 기존에 암호화가 안된 정보를 암호화하는 코드로
암호화를 전부 적용한다던가 하는 테스트코드를 작성했었는데
추후 CI를 자동화하며 기존 테스트를 다 통과하도록 yaml파일을 작성하니 테스트로서 맞지 않는 부분이 많았다.

기능이 잘 동작하는지 확인할 수 있는, 추후에도 계속 지속시킬 테스트코드를 작성하는 것을 목적으로 해야한다는 것을 배웠다.

 -> admin으로 먼저 로그인해서 기본 기능 테스트 쭉 만들기

 // 실제 배포를 하며
 이렇게 간단한 프로젝트를 간단한 서버에 간단 docker compose로 올리는 것도
 상당한 지식이 필요했다. 즉, 삽질을 너무 많이 하며 시간이 오래걸렸다.
 그래도 덕분에 Cloud지식과 CPU 아키텍쳐에 대한 지식, Docker에 대한 공부가 아주 확실히 된것 같다.
 ps. 현재 난 DB를 백업, 복원하며 Cloud로 이동시키는데, 실제 서비스는 DB를 어떤식으로 관리할까?


// 암호화는 AES256을 할까 하다가 Argon2로 함


 // mock 패키지 다운 및 설치 !!!!!!!!
 go install github.com/vektra/mockery/...

 - windows OS에서 Mock 자동 생성
 & $env:GOPATH\bin\mockery --keeptree --all

 - MacOS에선?



// 클린아키텍처
1. Entity : 
    비즈니스 규칙을 갖는 객체 (Repository가 반환하는 데이터. 데이터베이스나 외부 데이터 소스에서 반환된 데이터를 표현한다)

2. UseCase :
    비즈니스 규칙을 수행. 
    Repository 로부터 데이터를 가져와 Entity와 상호작용하고, 로직 수행한 후, 다시 Repository를 호출해 데이터를 저장, 갱신할 수 있다.

3. Repository : 
    데이터 저장소 (DB, 외부 API, 메모리)와의 상호 작용을 추상화, 캡슐화
    데이터 액세스 작업 담당


// 단위 테스트
1. 행복경로(Happy Path) 테스트
    정상적인 입력을 사용해서 예상대로 동작하는지 확인

2. 파라미터 유효성 검사 테스트
    적절한 에러를 반환하는지 확인

3. 에러 처리 테스트
    DB에서 발생하는 에러를 시뮬레이션 하여 에러 핸들링이 제대로 이루어지는지 확인



** Go는 구조체를 직접 return하는 것이 일반적임
구조체가 아주 커서 메모리를 많이 먹거나 하는게 아니면 포인터를 반환할 필요가 없음