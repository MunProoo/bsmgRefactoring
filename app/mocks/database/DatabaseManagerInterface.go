// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	define "BsmgRefactoring/define"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DatabaseManagerInterface is an autogenerated mock type for the DatabaseManagerInterface type
type DatabaseManagerInterface struct {
	mock.Mock
}

// CheckMemberIDDuplicate provides a mock function with given fields: memID
func (_m *DatabaseManagerInterface) CheckMemberIDDuplicate(memID string) (bool, error) {
	ret := _m.Called(memID)

	if len(ret) == 0 {
		panic("no return value specified for CheckMemberIDDuplicate")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(memID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(memID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(memID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmRpt provides a mock function with given fields: rptIdx
func (_m *DatabaseManagerInterface) ConfirmRpt(rptIdx int32) error {
	ret := _m.Called(rptIdx)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmRpt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(rptIdx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectBSMG provides a mock function with given fields:
func (_m *DatabaseManagerInterface) ConnectBSMG() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectBSMG")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectMariaDB provides a mock function with given fields:
func (_m *DatabaseManagerInterface) ConnectMariaDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectMariaDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAttr1Table provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateAttr1Table() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateAttr1Table")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAttr2Table provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateAttr2Table() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateAttr2Table")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDailyReportTable provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateDailyReportTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateDailyReportTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDataBase provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateDataBase() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateDataBase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMemberTable provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateMemberTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateMemberTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePartTable provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreatePartTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreatePartTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRankTable provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateRankTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateRankTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateScheduleTable provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateScheduleTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduleTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTables provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateTables() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateTables")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWeekReportTable provides a mock function with given fields:
func (_m *DatabaseManagerInterface) CreateWeekReportTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateWeekReportTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: memId
func (_m *DatabaseManagerInterface) DeleteMember(memId string) error {
	ret := _m.Called(memId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(memId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReport provides a mock function with given fields: rptIdx
func (_m *DatabaseManagerInterface) DeleteReport(rptIdx int32) error {
	ret := _m.Called(rptIdx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(rptIdx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSchedule provides a mock function with given fields: rptIdx
func (_m *DatabaseManagerInterface) DeleteSchedule(rptIdx int32) error {
	ret := _m.Called(rptIdx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(rptIdx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWeekReport provides a mock function with given fields: wRptIdx
func (_m *DatabaseManagerInterface) DeleteWeekReport(wRptIdx int) error {
	ret := _m.Called(wRptIdx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWeekReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(wRptIdx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMinIdx provides a mock function with given fields:
func (_m *DatabaseManagerInterface) FindMinIdx() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindMinIdx")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// InitDBManager provides a mock function with given fields: config
func (_m *DatabaseManagerInterface) InitDBManager(config define.DBConfig) error {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for InitDBManager")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(define.DBConfig) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertDailyReport provides a mock function with given fields: report
func (_m *DatabaseManagerInterface) InsertDailyReport(report define.BsmgReportInfo) error {
	ret := _m.Called(report)

	if len(ret) == 0 {
		panic("no return value specified for InsertDailyReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(define.BsmgReportInfo) error); ok {
		r0 = rf(report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertDefaultAttr1 provides a mock function with given fields:
func (_m *DatabaseManagerInterface) InsertDefaultAttr1() {
	_m.Called()
}

// InsertDefaultAttr2 provides a mock function with given fields:
func (_m *DatabaseManagerInterface) InsertDefaultAttr2() {
	_m.Called()
}

// InsertDefaultPart provides a mock function with given fields:
func (_m *DatabaseManagerInterface) InsertDefaultPart() {
	_m.Called()
}

// InsertDefaultRank provides a mock function with given fields:
func (_m *DatabaseManagerInterface) InsertDefaultRank() {
	_m.Called()
}

// InsertMember provides a mock function with given fields: member
func (_m *DatabaseManagerInterface) InsertMember(member define.BsmgMemberInfo) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for InsertMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(define.BsmgMemberInfo) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertSchedule provides a mock function with given fields: schedule
func (_m *DatabaseManagerInterface) InsertSchedule(schedule define.BsmgScheduleInfo) error {
	ret := _m.Called(schedule)

	if len(ret) == 0 {
		panic("no return value specified for InsertSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(define.BsmgScheduleInfo) error); ok {
		r0 = rf(schedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertWeekReport provides a mock function with given fields: wRptInfo
func (_m *DatabaseManagerInterface) InsertWeekReport(wRptInfo define.BsmgWeekRptInfo) error {
	ret := _m.Called(wRptInfo)

	if len(ret) == 0 {
		panic("no return value specified for InsertWeekReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(define.BsmgWeekRptInfo) error); ok {
		r0 = rf(wRptInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsConnected provides a mock function with given fields:
func (_m *DatabaseManagerInterface) IsConnected() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsExistBSMG provides a mock function with given fields:
func (_m *DatabaseManagerInterface) IsExistBSMG() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsExistBSMG")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeAttrTree provides a mock function with given fields:
func (_m *DatabaseManagerInterface) MakeAttrTree() ([]define.AttrTree, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeAttrTree")
	}

	var r0 []define.AttrTree
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]define.AttrTree, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []define.AttrTree); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.AttrTree)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakePartTree provides a mock function with given fields:
func (_m *DatabaseManagerInterface) MakePartTree() ([]define.PartTree, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakePartTree")
	}

	var r0 []define.PartTree
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]define.PartTree, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []define.PartTree); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.PartTree)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeWeekRpt provides a mock function with given fields: bef7d, bef1d, now, t
func (_m *DatabaseManagerInterface) MakeWeekRpt(bef7d string, bef1d string, now string, t time.Time) error {
	ret := _m.Called(bef7d, bef1d, now, t)

	if len(ret) == 0 {
		panic("no return value specified for MakeWeekRpt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, time.Time) error); ok {
		r0 = rf(bef7d, bef1d, now, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Release provides a mock function with given fields:
func (_m *DatabaseManagerInterface) Release() {
	_m.Called()
}

// SelecAttrSearchReportList provides a mock function with given fields: pageInfo, attrData
func (_m *DatabaseManagerInterface) SelecAttrSearchReportList(pageInfo define.PageInfo, attrData define.AttrSearchData) ([]define.BsmgReportInfo, int32, error) {
	ret := _m.Called(pageInfo, attrData)

	if len(ret) == 0 {
		panic("no return value specified for SelecAttrSearchReportList")
	}

	var r0 []define.BsmgReportInfo
	var r1 int32
	var r2 error
	if rf, ok := ret.Get(0).(func(define.PageInfo, define.AttrSearchData) ([]define.BsmgReportInfo, int32, error)); ok {
		return rf(pageInfo, attrData)
	}
	if rf, ok := ret.Get(0).(func(define.PageInfo, define.AttrSearchData) []define.BsmgReportInfo); ok {
		r0 = rf(pageInfo, attrData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgReportInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(define.PageInfo, define.AttrSearchData) int32); ok {
		r1 = rf(pageInfo, attrData)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(define.PageInfo, define.AttrSearchData) error); ok {
		r2 = rf(pageInfo, attrData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectAttr1List provides a mock function with given fields:
func (_m *DatabaseManagerInterface) SelectAttr1List() ([]define.BsmgAttr1Info, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectAttr1List")
	}

	var r0 []define.BsmgAttr1Info
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]define.BsmgAttr1Info, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []define.BsmgAttr1Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgAttr1Info)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectLatestRptIdx provides a mock function with given fields: reporter
func (_m *DatabaseManagerInterface) SelectLatestRptIdx(reporter string) (int32, error) {
	ret := _m.Called(reporter)

	if len(ret) == 0 {
		panic("no return value specified for SelectLatestRptIdx")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int32, error)); ok {
		return rf(reporter)
	}
	if rf, ok := ret.Get(0).(func(string) int32); ok {
		r0 = rf(reporter)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reporter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectMemberInfo provides a mock function with given fields: member
func (_m *DatabaseManagerInterface) SelectMemberInfo(member *define.BsmgMemberInfo) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for SelectMemberInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*define.BsmgMemberInfo) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectMemberListSearch provides a mock function with given fields: searchData
func (_m *DatabaseManagerInterface) SelectMemberListSearch(searchData define.SearchData) ([]define.BsmgMemberInfo, error) {
	ret := _m.Called(searchData)

	if len(ret) == 0 {
		panic("no return value specified for SelectMemberListSearch")
	}

	var r0 []define.BsmgMemberInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(define.SearchData) ([]define.BsmgMemberInfo, error)); ok {
		return rf(searchData)
	}
	if rf, ok := ret.Get(0).(func(define.SearchData) []define.BsmgMemberInfo); ok {
		r0 = rf(searchData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgMemberInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(define.SearchData) error); ok {
		r1 = rf(searchData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectPartLeader provides a mock function with given fields: Mem_Part
func (_m *DatabaseManagerInterface) SelectPartLeader(Mem_Part int32) (string, error) {
	ret := _m.Called(Mem_Part)

	if len(ret) == 0 {
		panic("no return value specified for SelectPartLeader")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (string, error)); ok {
		return rf(Mem_Part)
	}
	if rf, ok := ret.Get(0).(func(int32) string); ok {
		r0 = rf(Mem_Part)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(Mem_Part)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectPartist provides a mock function with given fields:
func (_m *DatabaseManagerInterface) SelectPartist() ([]define.BsmgPartInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectPartist")
	}

	var r0 []define.BsmgPartInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]define.BsmgPartInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []define.BsmgPartInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgPartInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRankList provides a mock function with given fields:
func (_m *DatabaseManagerInterface) SelectRankList() ([]define.BsmgRankInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectRankList")
	}

	var r0 []define.BsmgRankInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]define.BsmgRankInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []define.BsmgRankInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgRankInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectReportInfo provides a mock function with given fields: idx
func (_m *DatabaseManagerInterface) SelectReportInfo(idx int) (define.BsmgReportInfo, error) {
	ret := _m.Called(idx)

	if len(ret) == 0 {
		panic("no return value specified for SelectReportInfo")
	}

	var r0 define.BsmgReportInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (define.BsmgReportInfo, error)); ok {
		return rf(idx)
	}
	if rf, ok := ret.Get(0).(func(int) define.BsmgReportInfo); ok {
		r0 = rf(idx)
	} else {
		r0 = ret.Get(0).(define.BsmgReportInfo)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectReportList provides a mock function with given fields: pageInfo, searchData
func (_m *DatabaseManagerInterface) SelectReportList(pageInfo define.PageInfo, searchData define.SearchData) ([]define.BsmgReportInfo, int32, error) {
	ret := _m.Called(pageInfo, searchData)

	if len(ret) == 0 {
		panic("no return value specified for SelectReportList")
	}

	var r0 []define.BsmgReportInfo
	var r1 int32
	var r2 error
	if rf, ok := ret.Get(0).(func(define.PageInfo, define.SearchData) ([]define.BsmgReportInfo, int32, error)); ok {
		return rf(pageInfo, searchData)
	}
	if rf, ok := ret.Get(0).(func(define.PageInfo, define.SearchData) []define.BsmgReportInfo); ok {
		r0 = rf(pageInfo, searchData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgReportInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(define.PageInfo, define.SearchData) int32); ok {
		r1 = rf(pageInfo, searchData)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(define.PageInfo, define.SearchData) error); ok {
		r2 = rf(pageInfo, searchData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectReportListAWeek provides a mock function with given fields: Mem_ID, bef7d, bef1d
func (_m *DatabaseManagerInterface) SelectReportListAWeek(Mem_ID string, bef7d string, bef1d string) ([]define.BsmgReportInfo, error) {
	ret := _m.Called(Mem_ID, bef7d, bef1d)

	if len(ret) == 0 {
		panic("no return value specified for SelectReportListAWeek")
	}

	var r0 []define.BsmgReportInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]define.BsmgReportInfo, error)); ok {
		return rf(Mem_ID, bef7d, bef1d)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []define.BsmgReportInfo); ok {
		r0 = rf(Mem_ID, bef7d, bef1d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgReportInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(Mem_ID, bef7d, bef1d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectScheduleList provides a mock function with given fields: rptIdx
func (_m *DatabaseManagerInterface) SelectScheduleList(rptIdx int32) ([]define.BsmgScheduleInfo, error) {
	ret := _m.Called(rptIdx)

	if len(ret) == 0 {
		panic("no return value specified for SelectScheduleList")
	}

	var r0 []define.BsmgScheduleInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) ([]define.BsmgScheduleInfo, error)); ok {
		return rf(rptIdx)
	}
	if rf, ok := ret.Get(0).(func(int32) []define.BsmgScheduleInfo); ok {
		r0 = rf(rptIdx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgScheduleInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(rptIdx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserList provides a mock function with given fields:
func (_m *DatabaseManagerInterface) SelectUserList() ([]define.BsmgMemberInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectUserList")
	}

	var r0 []define.BsmgMemberInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]define.BsmgMemberInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []define.BsmgMemberInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgMemberInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectWeekReportCategorySearch provides a mock function with given fields: pageInfo, partIdx
func (_m *DatabaseManagerInterface) SelectWeekReportCategorySearch(pageInfo define.PageInfo, partIdx int) ([]define.BsmgWeekRptInfo, int32, error) {
	ret := _m.Called(pageInfo, partIdx)

	if len(ret) == 0 {
		panic("no return value specified for SelectWeekReportCategorySearch")
	}

	var r0 []define.BsmgWeekRptInfo
	var r1 int32
	var r2 error
	if rf, ok := ret.Get(0).(func(define.PageInfo, int) ([]define.BsmgWeekRptInfo, int32, error)); ok {
		return rf(pageInfo, partIdx)
	}
	if rf, ok := ret.Get(0).(func(define.PageInfo, int) []define.BsmgWeekRptInfo); ok {
		r0 = rf(pageInfo, partIdx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgWeekRptInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(define.PageInfo, int) int32); ok {
		r1 = rf(pageInfo, partIdx)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(define.PageInfo, int) error); ok {
		r2 = rf(pageInfo, partIdx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectWeekReportInfo provides a mock function with given fields: wRptIdx
func (_m *DatabaseManagerInterface) SelectWeekReportInfo(wRptIdx int) (define.BsmgWeekRptInfo, error) {
	ret := _m.Called(wRptIdx)

	if len(ret) == 0 {
		panic("no return value specified for SelectWeekReportInfo")
	}

	var r0 define.BsmgWeekRptInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (define.BsmgWeekRptInfo, error)); ok {
		return rf(wRptIdx)
	}
	if rf, ok := ret.Get(0).(func(int) define.BsmgWeekRptInfo); ok {
		r0 = rf(wRptIdx)
	} else {
		r0 = ret.Get(0).(define.BsmgWeekRptInfo)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(wRptIdx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectWeekReportList provides a mock function with given fields: pageInfo, searchData
func (_m *DatabaseManagerInterface) SelectWeekReportList(pageInfo define.PageInfo, searchData define.SearchData) ([]define.BsmgWeekRptInfo, int32, error) {
	ret := _m.Called(pageInfo, searchData)

	if len(ret) == 0 {
		panic("no return value specified for SelectWeekReportList")
	}

	var r0 []define.BsmgWeekRptInfo
	var r1 int32
	var r2 error
	if rf, ok := ret.Get(0).(func(define.PageInfo, define.SearchData) ([]define.BsmgWeekRptInfo, int32, error)); ok {
		return rf(pageInfo, searchData)
	}
	if rf, ok := ret.Get(0).(func(define.PageInfo, define.SearchData) []define.BsmgWeekRptInfo); ok {
		r0 = rf(pageInfo, searchData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]define.BsmgWeekRptInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(define.PageInfo, define.SearchData) int32); ok {
		r1 = rf(pageInfo, searchData)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(define.PageInfo, define.SearchData) error); ok {
		r2 = rf(pageInfo, searchData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateReportInfo provides a mock function with given fields: report
func (_m *DatabaseManagerInterface) UpdateReportInfo(report define.BsmgReportInfo) error {
	ret := _m.Called(report)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReportInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(define.BsmgReportInfo) error); ok {
		r0 = rf(report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: member
func (_m *DatabaseManagerInterface) UpdateUser(member define.BsmgMemberInfo) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(define.BsmgMemberInfo) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWeekReportInfo provides a mock function with given fields: report
func (_m *DatabaseManagerInterface) UpdateWeekReportInfo(report define.BsmgWeekRptInfo) error {
	ret := _m.Called(report)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWeekReportInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(define.BsmgWeekRptInfo) error); ok {
		r0 = rf(report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabaseManagerInterface creates a new instance of DatabaseManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseManagerInterface {
	mock := &DatabaseManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
