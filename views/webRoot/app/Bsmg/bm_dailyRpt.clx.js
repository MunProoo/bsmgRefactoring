/*
 * App URI: app/Bsmg/bm_dailyRpt
 * Source Location: app/Bsmg/bm_dailyRpt.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/Bsmg/bm_dailyRpt", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * bm_dailyRpt.js
			 * Created at 2022. 5. 19. 오전 9:48:38.
			 *
			 * @author SW2Team
			 ************************************************/
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				momentToday();
				app.lookup("sms_setAttr").send();
				app.lookup("sms_chkLogin").send();
				
				makeTitle();
			}
			
			function makeTitle(){
				var mem_name = app.lookup("dm_memberInfo").getString("mem_name");
				var rpt_title = app.lookup("rpt_title");
				var rpt_date = app.lookup("rpt_date").value;
				var title = rpt_date.substring(0, 4)+"년 "+ rpt_date.substring(4,6)+"월 "+rpt_date.substring(6,8)+"일 ";
				title = title + mem_name + " 일일 업무보고";
				rpt_title.value = title;
			}
			
			// 데이트 인풋 컨트롤 기본 날짜 지정
			function momentToday(){
				var vcDateInput = app.lookup("rpt_date");
				vcDateInput.format = "YYYYMMDDHHmmss";
				
				var vsToday = moment().format(vcDateInput.format);
				vcDateInput.value = vsToday;
				
			}
			
			/*
			 * "선택" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var dmReport = app.lookup("dm_reportInfo");
				var srcUserList = app.lookup("Src_memberList");
				var toRptUserList = app.lookup("toRpt_memberList");
				var refUserList = app.lookup("ref_memberList");
				var toRpt = app.lookup("toRpt");
				var ref = app.lookup("ref");
				
				app.getRootAppInstance().openDialog("app/Bsmg/bm_toRptList", {
					width : 1000, height : 600
				}, function(dialog){
					dialog.ready(function(dialogApp){
						dialog.modal = true;
						dialog.headerVisible = true;
						dialog.headerMovable = true;
						dialog.resizable = true;
						dialog.headerTitle = "보고 대상, 참조 대상 선택";
						dialog.initValue = {
							srcUserList : srcUserList,
							toRptUserList : toRptUserList,
							refUserList : refUserList
						};
						dialog.addEventListener("keyup", function(e){
							if(e.keyCode == 27) { // ESC
								dialog.close();
							}
						});
					});
				}).then(function(returnValue){
					
					dmReport.setValue("rpt_toRpt", returnValue.dmReport.getString("rpt_toRpt"));
					dmReport.setValue("rpt_ref", returnValue.dmReport.getString("rpt_ref"));
					dmReport.setValue("rpt_toRptID", returnValue.dmReport.getString("rpt_toRptID"));
					dmReport.setValue("rpt_refID", returnValue.dmReport.getString("rpt_refID"));
					
					srcUserList.clear();
					toRptUserList.clear();
					refUserList.clear();
					
					returnValue.srcUserList.copyToDataSet(srcUserList);
					returnValue.toRptUserList.copyToDataSet(toRptUserList);
					returnValue.refUserList.copyToDataSet(refUserList);
					
					toRpt.value = dmReport.getString("rpt_toRpt");
					ref.value = dmReport.getString("rpt_ref");
					
			//		console.log('리턴밸류 2개 가능? ', as);  안된다 ㅋ
				})
			}
			
			
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_setAttrSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_setAttr = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				if(result == 0){
			//		console.log(app.lookup("ds_List").getRowDataRanged());
					app.lookup("lcb1").redraw();
				} else{
					alert("속성 갱신 실패");
					return;
				}
			}
			
			
			/*
			 * "보고서 저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var date = app.lookup("rpt_date").value;
				var toRpt = app.lookup("toRpt").value;
				var ref = app.lookup("ref").value;
				
				var attr = app.lookup("lcb1").value;
				var title = app.lookup("rpt_title").value;
				var content = app.lookup("rpt_content").value;
				app.lookup("rpt_etc").value= app.lookup("rpt_etc").value.trim();
				
			//	console.log(date); // 2022-05-24 16:41:11 
			//	console.log(toRpt); // "" 
			//	console.log(content);
			// ----------------------------- 필수 정보 확인 ----------------------------
			
				if(toRpt == ""){
					alert("보고대상을 선택하세요.");
					return;
				} else if(attr == null) {
					alert("업무 속성을 선택하세요.");
					app.lookup("lcb1").focus();
					return;
				} else if(title == ""){
					alert("제목을 입력하세요.");
					return;
				} else if(content.trim() == ""){
					alert("업무 내용을 입력하세요");
					app.lookup("rpt_content").focus();
					return;
				} 
				
				attr = attr.split(",");
				// 업무속성 2를 안고르고 넘길 수도 있으므로.
				if(attr[1] == undefined){
					alert("업무 속성을 전부 선택하세요.");
					app.lookup("lcb1").focus();
					return;
				}
				
			//	console.log(dmReport.getDatas()); // 데이터 없는 컬럼 :  attr1,attr2 , reporter
				var dmReport = app.lookup("dm_reportInfo");
				dmReport.setValue("rpt_attr1", attr[0]);
				dmReport.setValue("rpt_attr2", attr[1]);
			//	console.log(app.lookup("ds_schedule").getRowDataRanged());
				// 순차적으로 보내기 위해서 동기통신으로 이게 문제라서 idx가 안갔나?
				
				var grd = app.lookup("grdSch");
				var cnt = grd.getRowCount();
				
				for(var i=0; i<cnt; i++){
					if(grd.getRow(i).getString("sc_content").trim() < 1){
						alert("일정에 공백만 넣을 수 없습니다.");
						return;
					} 
				}
				app.lookup("sms_registRpt").send();
				if(grd.getRowCount() > 0){
					app.lookup("sms_registSch").send();
					return;
				}
				alert("보고가 성공적으로 저장되었습니다.");
				app.close(1);
				
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_registRptSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_registRpt = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				var rptIdx = Number(app.lookup("dm_reportInfo").getValue("rpt_idx"));
				if (result == 0){
					console.log(rptIdx);
					return;
				} else {
					alert('보고서 저장에 실패하였습니다.');
				}
			}
			
			
			
			/*
			 * "+" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var grid = app.lookup("grdSch");
				var endRow = grid.getViewingEndRowIndex();
				grid.insertRow(endRow, true);
			}
			
			
			/*
			 * "-" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var grid = app.lookup("grdSch");
				var endRow = grid.getViewingEndRowIndex();
				grid.deleteRow(endRow);
				grid.showDeletedRow = false;
			}
			
			
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_registSchSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_registSch = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				if (result == 0){
					alert("보고가 성공적으로 저장되었습니다.");
					app.close(1);
					return;
				}
			}
			
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_chkLoginSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_chkLogin = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				if(result != 0){
					alert("세션이 끊어졌습니다.");
					app.close();
				}
			}
			
			
			/*
			 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
			 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onRpt_dateValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var rpt_date = e.control;
				makeTitle();
			}
			
			
			
			
			/*
			 * "닫기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.close();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("Src_memberList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "mem_id"},
					{"name": "mem_name"},
					{"name": "mem_rank"},
					{"name": "mem_part"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("toRpt_memberList");
			dataSet_2.parseData({
				"columns" : [
					{"name": "mem_id"},
					{"name": "mem_name"},
					{"name": "mem_rank"},
					{"name": "mem_part"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ref_memberList");
			dataSet_3.parseData({
				"columns" : [
					{"name": "mem_id"},
					{"name": "mem_name"},
					{"name": "mem_rank"},
					{"name": "mem_part"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("ds_List");
			dataSet_4.parseData({
				"columns" : [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("ds_schedule");
			dataSet_5.parseData({
				"columns" : [{"name": "sc_content"}]
			});
			app.register(dataSet_5);
			var dataMap_1 = new cpr.data.DataMap("dm_reportInfo");
			dataMap_1.parseData({
				"columns" : [
					{"name": "rpt_reporter"},
					{"name": "rpt_date"},
					{"name": "rpt_toRpt"},
					{"name": "rpt_ref"},
					{"name": "rpt_title"},
					{"name": "rpt_content"},
					{"name": "rpt_etc"},
					{"name": "rpt_attr1"},
					{"name": "rpt_attr2"},
					{"name": "rpt_idx"},
					{"name": "rpt_toRptID"},
					{"name": "rpt_refID"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("Result");
			dataMap_2.parseData({
				"columns" : [{"name": "ResultCode"}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dm_memberInfo");
			dataMap_3.parseData({
				"columns" : [
					{"name": "mem_id"},
					{"name": "mem_pw"},
					{"name": "mem_name"},
					{"name": "mem_rank"},
					{"name": "mem_part"}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("sms_setAttr");
			submission_1.method = "get";
			submission_1.action = "/bsmg/setting/attrTree";
			submission_1.addResponseData(dataSet_4, false);
			submission_1.addResponseData(dataMap_2, false);
			if(typeof onSms_setAttrSubmitDone == "function") {
				submission_1.addEventListener("submit-done", onSms_setAttrSubmitDone);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms_registRpt");
			submission_2.async = false;
			submission_2.action = "/bsmg/report/report";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataMap_2, false);
			submission_2.addResponseData(dataMap_1, false);
			if(typeof onSms_registRptSubmitDone == "function") {
				submission_2.addEventListener("submit-done", onSms_registRptSubmitDone);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms_registSch");
			submission_3.async = false;
			submission_3.action = "/bsmg/report/registSch";
			submission_3.addRequestData(dataSet_5);
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataMap_2, false);
			if(typeof onSms_registSchSubmitDone == "function") {
				submission_3.addEventListener("submit-done", onSms_registSchSubmitDone);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sms_chkLogin");
			submission_4.async = false;
			submission_4.method = "get";
			submission_4.action = "/bsmg/login/chkLogin";
			submission_4.addResponseData(dataMap_2, false);
			submission_4.addResponseData(dataMap_3, false);
			if(typeof onSms_chkLoginSubmitDone == "function") {
				submission_4.addEventListener("submit-done", onSms_chkLoginSubmitDone);
			}
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-color" : "#ffffff",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-form-group"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["100px", "259px", "100px", "1fr"]);
			formLayout_1.setUseColumnShade(0, true);
			formLayout_1.setUseColumnShade(2, true);
			formLayout_1.setRows(["1fr", "1fr"]);
			formLayout_1.setRowMinHeight(0, 10);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "구분";
				output_1.style.css({
					"font-weight" : "bolder",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output();
				output_2.value = "보고일자";
				output_2.style.css({
					"font-weight" : "bolder",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var output_3 = new cpr.controls.Output();
				output_3.value = "일일 업무보고";
				output_3.style.css({
					"padding-left" : "3px",
					"text-align" : "left"
				});
				container.addChild(output_3, {
					"colIndex": 1,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
				var dateInput_1 = new cpr.controls.DateInput("rpt_date");
				dateInput_1.style.css({
					"padding-left" : "3px"
				});
				dateInput_1.bind("value").toDataMap(app.lookup("dm_reportInfo"), "rpt_date");
				if(typeof onRpt_dateValueChange == "function") {
					dateInput_1.addEventListener("value-change", onRpt_dateValueChange);
				}
				container.addChild(dateInput_1, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var group_2 = new cpr.controls.Container();
				group_2.style.setClasses(["cl-form-group"]);
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.topMargin = "0px";
				formLayout_2.rightMargin = "0px";
				formLayout_2.bottomMargin = "0px";
				formLayout_2.leftMargin = "0px";
				formLayout_2.horizontalSpacing = "0px";
				formLayout_2.verticalSpacing = "0px";
				formLayout_2.horizontalSeparatorWidth = 1;
				formLayout_2.verticalSeparatorWidth = 1;
				formLayout_2.setColumns(["100px", "1fr", "100px", "1fr", "100px"]);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_4 = new cpr.controls.Output();
					output_4.value = "보고대상";
					output_4.style.css({
						"font-weight" : "bolder",
						"text-align" : "center"
					});
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "참조대상";
					output_5.style.css({
						"font-weight" : "bolder",
						"text-align" : "center"
					});
					container.addChild(output_5, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var button_1 = new cpr.controls.Button();
					button_1.value = "선택";
					if(typeof onButtonClick == "function") {
						button_1.addEventListener("click", onButtonClick);
					}
					container.addChild(button_1, {
						"colIndex": 4,
						"rowIndex": 0
					});
					var output_6 = new cpr.controls.Output("toRpt");
					output_6.readOnly = true;
					output_6.style.css({
						"background-color" : "#f8e4e4",
						"padding-left" : "3px",
						"text-align" : "left"
					});
					output_6.bind("value").toDataMap(app.lookup("dm_reportInfo"), "rpt_toRpt");
					container.addChild(output_6, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var output_7 = new cpr.controls.Output("ref");
					output_7.readOnly = true;
					output_7.style.css({
						"background-color" : "#e2f1cf",
						"padding-left" : "3px",
						"text-align" : "left"
					});
					output_7.bind("value").toDataMap(app.lookup("dm_reportInfo"), "rpt_ref");
					container.addChild(output_7, {
						"colIndex": 3,
						"rowIndex": 0
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 1,
					"colSpan": 4,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "20px",
				"left": "20px",
				"width": "820px",
				"height": "80px"
			});
			
			var group_3 = new cpr.controls.Container();
			group_3.style.setClasses(["cl-form-group"]);
			// Layout
			var formLayout_3 = new cpr.controls.layouts.FormLayout();
			formLayout_3.topMargin = "0px";
			formLayout_3.rightMargin = "0px";
			formLayout_3.bottomMargin = "0px";
			formLayout_3.leftMargin = "0px";
			formLayout_3.horizontalSpacing = "0px";
			formLayout_3.verticalSpacing = "0px";
			formLayout_3.horizontalSeparatorWidth = 1;
			formLayout_3.verticalSeparatorWidth = 1;
			formLayout_3.setColumns(["100px", "1fr"]);
			formLayout_3.setUseColumnShade(0, true);
			formLayout_3.setRows(["100px", "35px", "35px", "285px", "35px"]);
			group_3.setLayout(formLayout_3);
			(function(container){
				var output_8 = new cpr.controls.Output();
				output_8.value = "주요 일정";
				output_8.style.css({
					"font-weight" : "bolder",
					"text-align" : "center"
				});
				container.addChild(output_8, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var group_4 = new cpr.controls.Container();
				group_4.style.setClasses(["cl-form-group"]);
				// Layout
				var formLayout_4 = new cpr.controls.layouts.FormLayout();
				formLayout_4.topMargin = "0px";
				formLayout_4.rightMargin = "0px";
				formLayout_4.bottomMargin = "0px";
				formLayout_4.leftMargin = "0px";
				formLayout_4.horizontalSpacing = "0px";
				formLayout_4.verticalSpacing = "0px";
				formLayout_4.horizontalSeparatorWidth = 1;
				formLayout_4.verticalSeparatorWidth = 1;
				formLayout_4.setColumns(["1fr", "80px"]);
				formLayout_4.setUseColumnShade(0, true);
				formLayout_4.setRows(["1fr"]);
				group_4.setLayout(formLayout_4);
				(function(container){
					var grid_1 = new cpr.controls.Grid("grdSch");
					grid_1.init({
						"dataSet": app.lookup("ds_schedule"),
						"autoRowHeight": "all",
						"resizableColumns": "all",
						"columns": [{"width": "100px"}],
						"header": {
							"rows": [{"height": "24px"}],
							"cells": [{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.targetColumnName = "sc_content";
									cell.filterable = false;
									cell.sortable = false;
									cell.text = "주요 일정";
								}
							}]
						},
						"detail": {
							"rows": [{"height": "24px"}],
							"cells": [{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "sc_content";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("sc_content");
										inputBox_1.style.css({
											"padding-left" : "3px"
										});
										inputBox_1.bind("value").toDataColumn("sc_content");
										return inputBox_1;
									})();
								}
							}]
						}
					});
					grid_1.style.css({
						"background-color" : "#ffffff"
					});
					container.addChild(grid_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var group_5 = new cpr.controls.Container();
					group_5.style.setClasses(["cl-form-group"]);
					// Layout
					var formLayout_5 = new cpr.controls.layouts.FormLayout();
					formLayout_5.topMargin = "0px";
					formLayout_5.rightMargin = "0px";
					formLayout_5.bottomMargin = "0px";
					formLayout_5.leftMargin = "0px";
					formLayout_5.horizontalSpacing = "0px";
					formLayout_5.verticalSpacing = "0px";
					formLayout_5.horizontalSeparatorWidth = 1;
					formLayout_5.verticalSeparatorWidth = 1;
					formLayout_5.setColumns(["1fr", "1fr"]);
					formLayout_5.setUseColumnShade(0, true);
					formLayout_5.setRows(["1fr"]);
					group_5.setLayout(formLayout_5);
					(function(container){
						var button_2 = new cpr.controls.Button();
						button_2.value = "-";
						if(typeof onButtonClick4 == "function") {
							button_2.addEventListener("click", onButtonClick4);
						}
						container.addChild(button_2, {
							"colIndex": 0,
							"rowIndex": 0,
							"colSpan": 1,
							"rowSpan": 1
						});
						var button_3 = new cpr.controls.Button();
						button_3.value = "+";
						if(typeof onButtonClick3 == "function") {
							button_3.addEventListener("click", onButtonClick3);
						}
						container.addChild(button_3, {
							"colIndex": 1,
							"rowIndex": 0
						});
					})(group_5);
					container.addChild(group_5, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_4);
				container.addChild(group_4, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_9 = new cpr.controls.Output();
				output_9.value = "업무 속성";
				output_9.style.css({
					"font-weight" : "bolder",
					"text-align" : "center"
				});
				container.addChild(output_9, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var linkedComboBox_1 = new cpr.controls.LinkedComboBox("lcb1");
				linkedComboBox_1.preventInput = true;
				(function(linkedComboBox_1){
					linkedComboBox_1.setItemSet(app.lookup("ds_List"), {
						"label": "label",
						"value": "value",
						"parentValue": "parent"
					});
				})(linkedComboBox_1);
				linkedComboBox_1.placeholders = [
				];
				container.addChild(linkedComboBox_1, {
					"colIndex": 1,
					"rowIndex": 1
				});
				var output_10 = new cpr.controls.Output();
				output_10.value = "주요업무제목";
				output_10.style.css({
					"font-weight" : "bolder",
					"text-align" : "center"
				});
				container.addChild(output_10, {
					"colIndex": 0,
					"rowIndex": 2
				});
				var inputBox_2 = new cpr.controls.InputBox("rpt_title");
				inputBox_2.readOnly = true;
				inputBox_2.placeholder = "제목을 입력하세요.";
				inputBox_2.style.css({
					"padding-left" : "3px"
				});
				inputBox_2.bind("value").toDataMap(app.lookup("dm_reportInfo"), "rpt_title");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 2
				});
				var output_11 = new cpr.controls.Output();
				output_11.value = "주요업무 내용";
				output_11.style.css({
					"font-weight" : "bolder",
					"text-align" : "center"
				});
				container.addChild(output_11, {
					"colIndex": 0,
					"rowIndex": 3
				});
				var textArea_1 = new cpr.controls.TextArea("rpt_content");
				textArea_1.placeholder = "주요업무 내용을 입력하세요.";
				textArea_1.style.css({
					"padding-left" : "3px"
				});
				textArea_1.bind("value").toDataMap(app.lookup("dm_reportInfo"), "rpt_content");
				container.addChild(textArea_1, {
					"colIndex": 1,
					"rowIndex": 3
				});
				var output_12 = new cpr.controls.Output();
				output_12.value = "기타 특이사항";
				output_12.style.css({
					"font-weight" : "bolder",
					"text-align" : "center"
				});
				container.addChild(output_12, {
					"colIndex": 0,
					"rowIndex": 4
				});
				var inputBox_3 = new cpr.controls.InputBox("rpt_etc");
				inputBox_3.style.css({
					"padding-left" : "3px"
				});
				inputBox_3.bind("value").toDataMap(app.lookup("dm_reportInfo"), "rpt_etc");
				container.addChild(inputBox_3, {
					"colIndex": 1,
					"rowIndex": 4
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "99px",
				"left": "20px",
				"width": "820px",
				"height": "494px"
			});
			
			var button_4 = new cpr.controls.Button();
			button_4.value = "보고서 저장";
			if(typeof onButtonClick2 == "function") {
				button_4.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_4, {
				"top": "592px",
				"left": "691px",
				"width": "149px",
				"height": "43px"
			});
			
			var button_5 = new cpr.controls.Button();
			button_5.value = "닫기";
			if(typeof onButtonClick5 == "function") {
				button_5.addEventListener("click", onButtonClick5);
			}
			container.addChild(button_5, {
				"top": "675px",
				"left": "691px",
				"width": "88px",
				"height": "47px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "bm_dailyRpt";
	cpr.core.Platform.INSTANCE.register(app);
})();
