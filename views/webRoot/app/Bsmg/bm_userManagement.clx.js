/*
 * App URI: app/Bsmg/bm_userManagement
 * Source Location: app/Bsmg/bm_userManagement.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("app/Bsmg/bm_userManagement", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * bm_userManagement.js
			 * Created at 2022. 6. 2. 오후 3:09:29.
			 *
			 * @author SW2Team
			 ************************************************/
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				app.lookup("sms_getUserList").send();
				app.lookup("sms_setRankPart").send();
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_getUserListSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_getUserList = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				var src = app.lookup("Src_memberList");
				var copy = app.lookup("ds_memberListCopy");
				if (result == 0){
					src.copyToDataSet(copy);
				}
			}
			
			
			
			/*
			 * 서치 인풋에서 search 이벤트 발생 시 호출.
			 * Searchinput의 enter키 또는 검색버튼을 클릭하여 인풋의 값이 Search될때 발생하는 이벤트
			 */
			function onIpb1Search(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type cpr.controls.SearchInput
				 */
				var ipb1 = e.control;
				smsSearchSend();
			}
			
			function smsSearchSend(){
				app.lookup("Src_memberList").clear();
					
				var checked = app.lookup("cmb1").value;
				var input = app.lookup("ipb1").value;
				app.lookup("dm_search").setValue("search_combo", checked);
				app.lookup("dm_search").setValue("search_input", input);
				
				app.lookup("sms_getUserListSearch").send();	
			}
			
			
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var userList = app.lookup("userList");
				var indices = userList.getCheckRowIndices();
				
				if(indices.length == 0){
					alert("삭제할 사용자를 선택하세요");
					return;
				}
				
				var row = userList.getRow(indices[0]);
				var memID = row.getValue("mem_id");
			//	console.log(memID);
				
				if(confirm("정말 선택한 사용자를 삭제하시겠습니까?")){
					app.lookup("sms_delUser").action = "/bsmg/user/deleteUser/"+memID;
					app.lookup("sms_delUser").send();
				}
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_delUserSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_delUser = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				if (result == 0){
					app.lookup("sms_getUserList").send();
					app.lookup("sms_setRankPart").send();
					alert("정상적으로 삭제되었습니다.");
				}
			}
			
			
			
			
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_setRankPartSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_setRankPart = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				
				if(result==0){
					insertRankPartValue();
				}
			}
			
			function insertRankPartValue(){
				var dsUserList = app.lookup("Src_memberList");
				var grd = app.lookup("userList");
				for(var i=0; i<grd.getRowCount(); i++){
					var cmb4 = app.lookup("cmb4");
					var cmb5 = app.lookup("cmb5");
					cmb4.selectItemByLabel(dsUserList.getRow(i).getValue("mem_rank"));
					cmb5.selectItemByLabel(dsUserList.getRow(i).getValue("mem_part"));
					
					grd.setCellValue(i, 3, cmb4.value);
					grd.setCellValue(i, 4, cmb5.value);
				}
				grd.sort("mem_part ASC");
				grd.redraw();
			}
			
			/*
			 * "수정" 버튼(update)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onUpdateClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var update = e.control;
				var grd = app.lookup("userList");
				var indices = grd.getCheckRowIndices();
				var msg = "";
				var spaceFlag = true;
				
				if(indices.length == 0){
					alert("수정할 사용자가 없습니다.");
					return;
				} else if(indices.length == 1){
					msg = "선택한 1명의 사용자를 수정하시겠습니까?"
				} else {
					msg = "선택한 사용자들을 수정하시겠습니까?"
				}
				var putMemberList = app.lookup("ds_putMember");
				putMemberList.clear();
				
				if(confirm(msg)){
					indices.forEach(function(index){
						if(grd.getRow(index).getString("mem_name").trim().length < 1){
							alert("공백은 입력할 수 없습니다.");
							spaceFlag = false;
							return;
						} else {
							var rowData = grd.getRow(index).getRowData();
							putMemberList.addRowData(rowData);		
						}
					});
					if(spaceFlag){
						app.lookup("sms_putUserList").send();
					}
				} else {
					return;
				}
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_putUserListSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_putUserList = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				if(result == 0){
					alert('성공적으로 수정되었습니다.');
					app.lookup("sms_getUserList").send();
					app.lookup("sms_setRankPart").send();
				}
			}
			
			
			/*
			 * "취소" 버튼(cancel)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onCancelClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var cancel = e.control;
				var copy = app.lookup("ds_memberListCopy");
				var src = app.lookup("Src_memberList");
				var grd = app.lookup("userList");
				
				src.clear();
				copy.copyToDataSet(src);
				insertRankPartValue();
				app.lookup("userList").redraw();
			}
			
			
			/*
			 * 그리드에서 row-dblclick 이벤트 발생 시 호출.
			 * detail이 row를 더블클릭 한 경우 발생하는 이벤트.
			 */
			function onUserListRowDblclick(/* cpr.events.CGridMouseEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var userList = e.control;
				var rowIndex = userList.getSelectedRowIndex();
				if(rowIndex != null){
					if(!userList.getSelectedRow().checked){
						userList.setCheckRowIndex(rowIndex, true);
						return;		
					} else {
						userList.setCheckRowIndex(rowIndex, false);
						return;		
					}
				}
			}
			
			
			/*
			 * 서브미션에서 before-send 이벤트 발생 시 호출.
			 * XMLHttpRequest가 open된 후 send 함수가 호출되기 직전에 발생합니다.
			 */
			function onSms_getUserListBeforeSend(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_getUserList = e.control;
				dsClear();
			}
			
			function dsClear(){
				var src = app.lookup("Src_memberList");
				var copy = app.lookup("ds_memberListCopy");
				var rank = app.lookup("ds_rank");
				var part = app.lookup("ds_part");	
				src.clear();
				copy.clear();
				rank.clear();
				part.clear();
			}
			
			
			/*
			 * "닫기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.close();
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_getUserListSearchSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_getUserListSearch = e.control;
				var result = app.lookup("Result").getString("ResultCode");
				if(result == 0){
					var src = app.lookup("Src_memberList");
					var copy = app.lookup("ds_memberListCopy");
					src.copyToDataSet(copy);
					app.lookup("sms_setRankPart").send();
				}
			}
			
			
			/*
			 * 서브미션에서 before-send 이벤트 발생 시 호출.
			 * XMLHttpRequest가 open된 후 send 함수가 호출되기 직전에 발생합니다.
			 */
			function onSms_getUserListSearchBeforeSend(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_getUserListSearch = e.control;
				dsClear();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("Src_memberList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "mem_id"},
					{"name": "mem_name"},
					{"name": "mem_rank"},
					{"name": "mem_part"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds_rank");
			dataSet_2.parseData({
				"columns" : [
					{"name": "rank_name"},
					{
						"name": "rank_idx",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds_part");
			dataSet_3.parseData({
				"columns" : [
					{"name": "part_name"},
					{
						"name": "part_idx",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("ds_memberListCopy");
			dataSet_4.parseData({
				"columns" : [
					{"name": "mem_id"},
					{"name": "mem_name"},
					{"name": "mem_rank"},
					{"name": "mem_part"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("ds_putMember");
			dataSet_5.parseData({
				"columns" : [
					{"name": "mem_id"},
					{"name": "mem_name"},
					{"name": "mem_rank"},
					{"name": "mem_part"}
				]
			});
			app.register(dataSet_5);
			var dataMap_1 = new cpr.data.DataMap("Result");
			dataMap_1.parseData({
				"columns" : [{"name": "ResultCode"}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dm_search");
			dataMap_2.parseData({
				"columns" : [
					{"name": "search_combo"},
					{"name": "search_input"}
				]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("sms_getUserList");
			submission_1.async = false;
			submission_1.method = "get";
			submission_1.action = "/bsmg/user/userList";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataMap_1, false);
			if(typeof onSms_getUserListSubmitDone == "function") {
				submission_1.addEventListener("submit-done", onSms_getUserListSubmitDone);
			}
			if(typeof onSms_getUserListBeforeSend == "function") {
				submission_1.addEventListener("before-send", onSms_getUserListBeforeSend);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sms_getUserListSearch");
			submission_2.method = "get";
			submission_2.action = "/bsmg/user/userSearch";
			submission_2.addRequestData(dataMap_2);
			submission_2.addResponseData(dataSet_1, false);
			submission_2.addResponseData(dataMap_1, false);
			if(typeof onSms_getUserListSearchSubmitDone == "function") {
				submission_2.addEventListener("submit-done", onSms_getUserListSearchSubmitDone);
			}
			if(typeof onSms_getUserListSearchBeforeSend == "function") {
				submission_2.addEventListener("before-send", onSms_getUserListSearchBeforeSend);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms_delUser");
			submission_3.method = "delete";
			submission_3.action = "/bsmg/user/deleteUser";
			submission_3.addResponseData(dataMap_1, false);
			if(typeof onSms_delUserSubmitDone == "function") {
				submission_3.addEventListener("submit-done", onSms_delUserSubmitDone);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sms_setRankPart");
			submission_4.async = false;
			submission_4.method = "get";
			submission_4.action = "/bsmg/setting/rankPart";
			submission_4.addResponseData(dataSet_2, false);
			submission_4.addResponseData(dataSet_3, false);
			submission_4.addResponseData(dataMap_1, false);
			if(typeof onSms_setRankPartSubmitDone == "function") {
				submission_4.addEventListener("submit-done", onSms_setRankPartSubmitDone);
			}
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("sms_putUserList");
			submission_5.method = "put";
			submission_5.action = "/bsmg/user";
			submission_5.addRequestData(dataSet_5);
			submission_5.addResponseData(dataMap_1, false);
			if(typeof onSms_putUserListSubmitDone == "function") {
				submission_5.addEventListener("submit-done", onSms_putUserListSubmitDone);
			}
			app.register(submission_5);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-form-group"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.horizontalSeparatorWidth = 1;
			formLayout_1.verticalSeparatorWidth = 1;
			formLayout_1.setColumns(["1fr", "3fr"]);
			formLayout_1.setUseColumnShade(0, true);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var searchInput_1 = new cpr.controls.SearchInput("ipb1");
				if(typeof onIpb1Search == "function") {
					searchInput_1.addEventListener("search", onIpb1Search);
				}
				container.addChild(searchInput_1, {
					"colIndex": 1,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
				var comboBox_1 = new cpr.controls.ComboBox("cmb1");
				comboBox_1.value = "0";
				comboBox_1.fixedListWidth = true;
				comboBox_1.placeholder = "전체";
				comboBox_1.preventInput = true;
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("전체", "0"));
					comboBox_1.addItem(new cpr.controls.Item("이름", "1"));
					comboBox_1.addItem(new cpr.controls.Item("직급", "2"));
					comboBox_1.addItem(new cpr.controls.Item("부서", "3"));
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "40px",
				"left": "10px",
				"width": "534px",
				"height": "30px"
			});
			
			var grid_1 = new cpr.controls.Grid("userList");
			grid_1.init({
				"dataSet": app.lookup("Src_memberList"),
				"wheelRowCount": 1,
				"columnMovable": true,
				"resizableColumns": "all",
				"columns": [
					{"width": "25px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.targetColumnName = "chk";
								cell.filterable = false;
								cell.sortable = false;
								cell.columnType = "checkbox";
								cell.text = "chk";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.targetColumnName = "mem_id";
								cell.filterable = false;
								cell.text = "아이디";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.targetColumnName = "mem_name";
								cell.filterable = false;
								cell.sortable = false;
								cell.text = "이름";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.targetColumnName = "mem_rank";
								cell.filterable = false;
								cell.sortable = true;
								cell.text = "직급";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.targetColumnName = "mem_part";
								cell.filterable = false;
								cell.sortable = true;
								cell.text = "부서";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "mem_id";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "mem_name";
								cell.control = (function(){
									var inputBox_1 = new cpr.controls.InputBox("ipb2");
									inputBox_1.bind("value").toDataColumn("mem_name");
									return inputBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "mem_rank";
								cell.control = (function(){
									var comboBox_2 = new cpr.controls.ComboBox("cmb2");
									comboBox_2.preventInput = true;
									(function(comboBox_2){
										comboBox_2.setItemSet(app.lookup("ds_rank"), {
											"label": "rank_name",
											"value": "rank_idx"
										})
									})(comboBox_2);
									comboBox_2.bind("value").toDataColumn("mem_rank");
									return comboBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "mem_part";
								cell.control = (function(){
									var comboBox_3 = new cpr.controls.ComboBox("cmb3");
									comboBox_3.preventInput = true;
									(function(comboBox_3){
										comboBox_3.setItemSet(app.lookup("ds_part"), {
											"label": "part_name",
											"value": "part_idx"
										})
									})(comboBox_3);
									comboBox_3.bind("value").toDataColumn("mem_part");
									return comboBox_3;
								})();
							}
						}
					]
				}
			});
			grid_1.style.css({
				"padding-left" : "3px"
			});
			if(typeof onUserListRowDblclick == "function") {
				grid_1.addEventListener("row-dblclick", onUserListRowDblclick);
			}
			container.addChild(grid_1, {
				"top": "70px",
				"left": "10px",
				"width": "534px",
				"height": "495px"
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.value = "사용자 목록";
			output_1.style.css({
				"font-weight" : "bolder",
				"text-align" : "center"
			});
			container.addChild(output_1, {
				"top": "10px",
				"left": "10px",
				"width": "534px",
				"height": "30px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "삭제";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "187px",
				"left": "554px",
				"width": "88px",
				"height": "47px"
			});
			
			var button_2 = new cpr.controls.Button("update");
			button_2.value = "수정";
			if(typeof onUpdateClick == "function") {
				button_2.addEventListener("click", onUpdateClick);
			}
			container.addChild(button_2, {
				"top": "70px",
				"left": "554px",
				"width": "88px",
				"height": "47px"
			});
			
			var comboBox_4 = new cpr.controls.ComboBox("cmb4");
			comboBox_4.visible = false;
			(function(comboBox_4){
				comboBox_4.setItemSet(app.lookup("ds_rank"), {
					"label": "rank_name",
					"value": "rank_idx"
				})
			})(comboBox_4);
			container.addChild(comboBox_4, {
				"top": "259px",
				"left": "739px",
				"width": "100px",
				"height": "20px"
			});
			
			var comboBox_5 = new cpr.controls.ComboBox("cmb5");
			comboBox_5.visible = false;
			(function(comboBox_5){
				comboBox_5.setItemSet(app.lookup("ds_part"), {
					"label": "part_name",
					"value": "part_idx"
				})
			})(comboBox_5);
			container.addChild(comboBox_5, {
				"top": "278px",
				"left": "739px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_3 = new cpr.controls.Button("cancel");
			button_3.value = "취소";
			if(typeof onCancelClick == "function") {
				button_3.addEventListener("click", onCancelClick);
			}
			container.addChild(button_3, {
				"top": "70px",
				"left": "652px",
				"width": "88px",
				"height": "47px"
			});
			
			var button_4 = new cpr.controls.Button();
			button_4.value = "닫기";
			if(typeof onButtonClick2 == "function") {
				button_4.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_4, {
				"top": "245px",
				"left": "554px",
				"width": "88px",
				"height": "47px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "bm_userManagement";
	cpr.core.Platform.INSTANCE.register(app);
})();
