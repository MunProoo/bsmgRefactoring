/// start - lib/DataManager
/*
 * Module URI: lib/DataManager
 * SRC: lib/DataManager.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("lib/DataManager", function(exports, globals, module){
		/************************************************
		 * DataManager.module.js
		 * Created at 2023. 12. 22. 오후 4:48:09.
		 *
		 * @author MJY
		 ************************************************/
		
		exports.id = "DataManager.module.js";
		{
			
			var _dataManager = null;
			
			var DataManager = function() {
				
				// 직급
				/** #type cpr.data.DataSet */
				this._rankList = null;
				
				// 부서 
				/** #type cpr.data.DataSet */
				this._partList = null;
				
				// 업무 속성 트리
				/** #type cpr.data.DataSet */
				this._dsAttrTree = null;
			}
			
			DataManager.prototype.setRankList = function( /* cpr.data.DataSet */ dsRankList) {
				this._rankList = dsRankList;
			}
			
			DataManager.prototype.getRankList = function() {
				return this._rankList;
			}
			
			DataManager.prototype.setPartList = function( /* cpr.data.DataSet */ dsPartList) {
				this._partList = dsPartList;
			}
			
			DataManager.prototype.getPartList = function() {
				return this._partList;
			}
			
			DataManager.prototype.setDsAttrTree = function( /*cpr.data.DataSet*/ dsAttrTree) {
				this._dsAttrTree = dsAttrTree;
			}
			
			DataManager.prototype.getDsAttrTree = function() {
				return this._dsAttrTree;
			}
				
		//		DataManager.prototype.insertPosition = function(rowPosition) {
		//			var columns = Object.keys(rowPosition);
		//			console.log(rowPosition[columns[0]]);
		//			
		//			var positions = this._positionList.findFirstRow("PositionID == " + rowPosition[columns[0]]);
		//			
		//			if (positions == null) {
		//				var insertedRow = this._positionList.addRowData(rowPosition);
		//				this._positionList.commit();
		//			}
		//		
		//		}
			
		//		DataManager.prototype.updatePosition = function(rowPosition) {
		//			var updateRow = this._positionList.findFirstRow("PositionID == " + rowPosition.PositionID);
		//			if (updateRow) {
		//				updateRow.setRowData(rowPosition)
		//				this._positionList.commit();
		//			}
		//		}
		//		
		//		DataManager.prototype.deletePosition = function(positionID) {
		//			var delRow = this._positionList.findFirstRow("PositionID == " + positionID);
		//			if (delRow) {
		//				this._positionList.deleteRow(delRow.getIndex());
		//				this._positionList.commit();
		//			}
		//		}
				
			
			globals.getDataManager = function() {
				if (_dataManager == null) _dataManager = new DataManager();
				return _dataManager;
			}
		}
	});
})();
/// end - lib/DataManager
/// start - lib/define
/*
 * Module URI: lib/define
 * SRC: lib/define.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("lib/define", function(exports, globals, module){
		/************************************************
		 * define.module.js
		 * Created at 2024. 1. 19. 오전 9:59:09.
		 *
		 * @author SW2Team
		 ************************************************/
		
		globals.admin = 0;
		globals.Rank1 = 1;
		globals.Rank2 = 2;
		globals.Rank3 = 3;
		globals.Rank4 = 4;
	});
})();
/// end - lib/define
/// start - lib/defineError
/*
 * Module URI: lib/defineError
 * SRC: lib/defineError.module.js
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	cpr.core.Module.define("lib/defineError", function(exports, globals, module){
		/************************************************
		 * defineError.module.js
		 * Created at 2023. 12. 29. 오전 11:24:39.
		 *
		 * @author SW2Team
		 ************************************************/
		
		globals.ErrorInvalidParameter			= 1 // 요청 파라미터 에러
		globals.ErrorSession            		= 2 // 서버 세션 체크 에러
		globals.ErrorDataBase                   = 3 // Database 에러
		globals.ErrorDuplicatedID               = 4 // ID 중복
		globals.ErrorLoginFailed     			= 5 // 로그인 실패
		globals.ErrorLoginDuplication     			= 6 // 로그인 중복
		globals.ErrorNotLoggedIn                = 7 // 로그인하지 않은 상태
		globals.ErrorNotAuthorizedUser          = 8 // 권한이 없음
		globals.ErrorTokenCreationFailed          = 9 // 토큰 생성 실패
		globals.ErrorInvalidToken          = 10 // 유효하지 않은 토큰
		
		
		globals.getErrorString = function( errCode ){
			var errMsg = "";
			errCode = Number(errCode)
			switch ( errCode ){				
				case ErrorInvalidParameter:  				errMsg = "요청값이 잘못 되었습니다."; break;
				case ErrorSession: 					errMsg ="세션이 끊겼습니다."; break;
				case ErrorDataBase: 					errMsg = "Database 에러입니다."; break;
				case ErrorLoginFailed:                 		errMsg = "아이디 혹은 비밀번호가 다릅니다."; break;
				case ErrorNotLoggedIn: 								errMsg = "ID가 중복되었습니다."; break; 
				case ErrorLoginDuplication: 								errMsg = "이미 로그인 중입니다."; break; 
				case ErrorNotAuthorizedUser: 								errMsg = "권한이 없습니다."; break; 
				case ErrorTokenCreationFailed: 								errMsg = "로그인에 실패하였습니다."; break; 
				case ErrorInvalidToken: 								errMsg = "유효하지 않은 정보입니다. (토큰)"; break; 
				default : errMsg = "정의되지 않은 에러"; break;
			}
			return errMsg;
		}
	});
})();
/// end - lib/defineError
