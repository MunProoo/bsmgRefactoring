1. SPA
클라이언트 측에서 페이지를 변경하는 SPA라서, 세션 체크 요청은 클라이언트 측에서 해야한다.
추후 jwt를 사용해도 웹앱 형식이면 마찬가지 일듯

2. 서브미션의 mediaType  : application/json ? application/x-www-form-urlencoded
통신을 application/json으로 사용하도록 전부 변경하려 했지만, eXBuilder6의 여러 가지 문제가 있었다.
    1) json으로 통신 시 무조건 POST로 가는 문제
        >> GET으로 가야하면 무조건 application/x-www-form-urlencoded를 사용해야함
    2) 웹에서 보내줄 땐 {data: {dm_memberInfo: {mem_id: "ㅁㅇ", mem_pw: "ad", mem_name: "", mem_rank: "", mem_part: ""}}} 
       "data"가 다른 데이터들을 감싸 안은 포맷이라서 서버에서 c.Bind()로 매핑하려할 땐, "data" 구조체를 따로 만들어야 했다.
       반대로 서버에서 클라이언트에 보낼땐 "data"가 없어야 값을 받을 수 있었다.. 

       ... 그래서 구조체 재사용이 안되고, request, response 따로 운영해야 했다.

3. 쿼리
Database 작업이 성능을 좌우하므로 항상 쿼리에 신경써야 한다.
(1) 
select count(*) FROM table 을 많이 썼다. 1만건 이하라면 괜찮지만, 수십만 건이라면 다르다.
PK를 이용한 select count(0) FROM table 을 쓰는 것이 성능상엔 더 좋다.
(단, 단순히 테이블의 모든 row의 개수를 원하는 거면 *이 더 빠르다. WHERE절을 이용하여 count하는 경우에 PK를 지정하면 좋다)

빅데이터처럼 5천만건 이상의 경우라면, index를 이용해도 4분가량이 걸린다고 한다.

mssql이라면 
SELECT DISTINCT MAX(A.rows)FROM SYSINDEXES AS A
INNER JOIN SYSOBJECTS AS B 
ON A.id = B.idWHERE B.type = 'U' and B.name = 'tb_test'

mysql이라면 ...?


이 쿼리를 사용하면 5천만건이라도 0초가 걸리니 오버스펙일지라도 한번쯤 더 고민을 먼저 하고 코딩을 해야겠다

4. MacOS
windows에서는 그냥 넘어갈 수 있는 부분들이 Mac에선 안넘어가졌다
- 1 request json이 구조체에 bind안되는 이슈 (400 typeErr 구조체의 필드가 int라 해당 에러 발생..)
-> 그냥 request Data Get용 구조체하나 생성해서 타입을 일일이 Parsing하기로 함
- 2 index가 0부터 시작하면 doesn't have default value, 
아니 근데 auto_increment 왜안됨? 애초에 인덱스 안넣어도 알아서 증가해야지?

gorm mariadb auto_increment는 왜 안먹는걸까... 그냥 테이블에서 바꿔버림

5. Table 설계
생각보다 이전 table들의 타입 설계가 별로였다. 
MSSQL을 사용하다 mariadb로 변경을 하고 있어서..
report의 rpt_confirm 컬럼은 0과 1만 쓸거면 bool을 쓰던가 tinyint를 썼으면 좋았을텐데
괜히 bit를 써서 gorm 사용에 있어 불편함을 불러왔다.
(golang의 슬라이스에 바로 converting 해주는 find함수에서 golang의 byte, int8 등과 호환 안됨)

AutoMigrate를 써서 테이블 생성

6. Gorm 조인
report에 보고자, 보고대상, 참조대상을 member의 ID를 기록하도록 하니까 문제가 있었다
실제로 보여줄때에는 이름으로 보여줘야 하는데 이름을 가져올 방법이 없던 것
Raw 쿼리를 쓰기에는 너무 깔끔하지 못해서 많은 삽질을 하며 Gorm을 통해 가져오는 방법을 찾았다

먼저 이름을 따로 받아올 struct를 만들어 놓고, 가져오는 모델을 포함시킨다

type BsmgIncludeNameReport struct {
	BsmgReportInfo
	Reporter_Name string
	ToRpt_Name    string
	Ref_Name      string
}

func (brName *BsmgIncludeNameReport) ChangeIDToName() {
	brName.BsmgReportInfo.Rpt_Reporter = brName.Rpt_Reporter
	brName.BsmgReportInfo.Rpt_toRpt = brName.ToRpt_Name
	brName.BsmgReportInfo.Rpt_ref = brName.Ref_Name
}

가져오는 쿼리는 다음과 같다

중요한 건 매핑을 위해 select함수를 잘 쓰는 것이다
dbWhere := dbm.DB.Model(define.BsmgReportInfo{}).Debug().
        // bsmg_report_infos.*이라고 하면 gorm이 못찾는다. 그냥 *을 해줘야함
		Select(`*, m.mem_name as reporter_name`). 
        Joins("INNER JOIN bsmg_member_infos m ON m.mem_id = bsmg_report_infos.rpt_reporter").
        Joins("INNER JOIN bsmg_attr1_infos a ON a.attr1_idx = bsmg_report_infos.rpt_attr1").
        Where("rpt_title LIKE ? OR rpt_content LIKE ? OR m.mem_name LIKE ?", "%"+ipb+"%", "%"+ipb+"%", "%"+ipb+"%").
        Order("rpt_idx DESC")
		dbWhere.Count(&totalCount)
		dbWhere.Limit(limit).Offset(offset).Scan(&reportIncludeName)
Find가 아닌 Scan인 것도 주의해야 한다

// 데드락
DB 작업을 하면서, server에 Mutex에 Lock을 걸었었는데, 서버가 먹통이 되었었다.
아무 작업도 안하길래 왜 이런걸까 당황하다가, 이전에 서버 프로세서를 
채널링을 통해 DB작업을 하려고 고루틴으로 돌린 게 기억났다.
Server의 State를 Update하면서 Lock, Unlock을 하고 있더라.
SetState에 Lock, Unlock을 하면 되는데 굳이 SetState를 호출하는 for문에서 Lock을 걸고 있어서
무한으로 Lock, Unlock을 하고 있었던 것이다.
작은 나만의 프로젝트여서 금방 찾았지, 큰 프로젝트였으면 상당히 찾기 힘들 것 같다.
언제나 Mutex Lock을 걸때는 주의해야 겠다.